// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CheckServer implements checkServer operation.
	//
	// Этот эндпоинт используется для проверки готовности
	// сервера обрабатывать запросы.
	// Чекер программа будет ждать первый успешный ответ и
	// затем начнет выполнение тестовых сценариев.
	//
	// GET /ping
	CheckServer(ctx context.Context) (CheckServerRes, error)
	// CreateBid implements createBid operation.
	//
	// Создание предложения для существующего тендера.
	//
	// POST /bids/new
	CreateBid(ctx context.Context, req *CreateBidReq) (CreateBidRes, error)
	// CreateTender implements createTender operation.
	//
	// Создание нового тендера с заданными параметрами.
	//
	// POST /tenders/new
	CreateTender(ctx context.Context, req *CreateTenderReq) (CreateTenderRes, error)
	// EditBid implements editBid operation.
	//
	// Редактирование существующего предложения.
	//
	// PATCH /bids/{bidId}/edit
	EditBid(ctx context.Context, req *EditBidReq, params EditBidParams) (EditBidRes, error)
	// EditTender implements editTender operation.
	//
	// Изменение параметров существующего тендера.
	//
	// PATCH /tenders/{tenderId}/edit
	EditTender(ctx context.Context, req *EditTenderReq, params EditTenderParams) (EditTenderRes, error)
	// GetBidReviews implements getBidReviews operation.
	//
	// Ответственный за организацию может посмотреть
	// прошлые отзывы на предложения автора, который создал
	// предложение для его тендера.
	//
	// GET /bids/{tenderId}/reviews
	GetBidReviews(ctx context.Context, params GetBidReviewsParams) (GetBidReviewsRes, error)
	// GetBidStatus implements getBidStatus operation.
	//
	// Получить статус предложения по его уникальному
	// идентификатору.
	//
	// GET /bids/{bidId}/status
	GetBidStatus(ctx context.Context, params GetBidStatusParams) (GetBidStatusRes, error)
	// GetBidsForTender implements getBidsForTender operation.
	//
	// Получение предложений, связанных с указанным
	// тендером.
	//
	// GET /bids/{tenderId}/list
	GetBidsForTender(ctx context.Context, params GetBidsForTenderParams) (GetBidsForTenderRes, error)
	// GetTenderStatus implements getTenderStatus operation.
	//
	// Получить статус тендера по его уникальному
	// идентификатору.
	//
	// GET /tenders/{tenderId}/status
	GetTenderStatus(ctx context.Context, params GetTenderStatusParams) (GetTenderStatusRes, error)
	// GetTenders implements getTenders operation.
	//
	// Список тендеров с возможностью фильтрации по типу
	// услуг.
	// Если фильтры не заданы, возвращаются все тендеры.
	//
	// GET /tenders
	GetTenders(ctx context.Context, params GetTendersParams) (GetTendersRes, error)
	// GetUserBids implements getUserBids operation.
	//
	// Получение списка предложений текущего пользователя.
	// Для удобства использования включена поддержка
	// пагинации.
	//
	// GET /bids/my
	GetUserBids(ctx context.Context, params GetUserBidsParams) (GetUserBidsRes, error)
	// GetUserTenders implements getUserTenders operation.
	//
	// Получение списка тендеров текущего пользователя.
	// Для удобства использования включена поддержка
	// пагинации.
	//
	// GET /tenders/my
	GetUserTenders(ctx context.Context, params GetUserTendersParams) (GetUserTendersRes, error)
	// RollbackBid implements rollbackBid operation.
	//
	// Откатить параметры предложения к указанной версии.
	// Это считается новой правкой, поэтому версия
	// инкрементируется.
	//
	// PUT /bids/{bidId}/rollback/{version}
	RollbackBid(ctx context.Context, params RollbackBidParams) (RollbackBidRes, error)
	// RollbackTender implements rollbackTender operation.
	//
	// Откатить параметры тендера к указанной версии. Это
	// считается новой правкой, поэтому версия
	// инкрементируется.
	//
	// PUT /tenders/{tenderId}/rollback/{version}
	RollbackTender(ctx context.Context, params RollbackTenderParams) (RollbackTenderRes, error)
	// SubmitBidDecision implements submitBidDecision operation.
	//
	// Отправить решение (одобрить или отклонить) по
	// предложению.
	//
	// PUT /bids/{bidId}/submit_decision
	SubmitBidDecision(ctx context.Context, params SubmitBidDecisionParams) (SubmitBidDecisionRes, error)
	// SubmitBidFeedback implements submitBidFeedback operation.
	//
	// Отправить отзыв по предложению.
	//
	// PUT /bids/{bidId}/feedback
	SubmitBidFeedback(ctx context.Context, params SubmitBidFeedbackParams) (SubmitBidFeedbackRes, error)
	// UpdateBidStatus implements updateBidStatus operation.
	//
	// Изменить статус предложения по его уникальному
	// идентификатору.
	//
	// PUT /bids/{bidId}/status
	UpdateBidStatus(ctx context.Context, params UpdateBidStatusParams) (UpdateBidStatusRes, error)
	// UpdateTenderStatus implements updateTenderStatus operation.
	//
	// Изменить статус тендера по его идентификатору.
	//
	// PUT /tenders/{tenderId}/status
	UpdateTenderStatus(ctx context.Context, params UpdateTenderStatusParams) (UpdateTenderStatusRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
