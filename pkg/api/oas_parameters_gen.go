// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EditBidParams is parameters of editBid operation.
type EditBidParams struct {
	BidId    BidId
	Username Username
}

func unpackEditBidParams(packed middleware.Parameters) (params EditBidParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeEditBidParams(args [1]string, argsEscaped bool, r *http.Request) (params EditBidParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// EditTenderParams is parameters of editTender operation.
type EditTenderParams struct {
	TenderId TenderId
	Username Username
}

func unpackEditTenderParams(packed middleware.Parameters) (params EditTenderParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeEditTenderParams(args [1]string, argsEscaped bool, r *http.Request) (params EditTenderParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBidReviewsParams is parameters of getBidReviews operation.
type GetBidReviewsParams struct {
	TenderId TenderId
	// Имя пользователя автора предложений, отзывы на
	// которые нужно просмотреть.
	AuthorUsername Username
	// Имя пользователя, который запрашивает отзывы.
	RequesterUsername Username
	// Максимальное число возвращаемых объектов.
	// Используется для запросов с пагинацией.
	// Сервер должен возвращать максимальное допустимое
	// число объектов.
	Limit OptInt32
	// Какое количество объектов должно быть пропущено с
	// начала. Используется для запросов с пагинацией.
	Offset OptInt32
}

func unpackGetBidReviewsParams(packed middleware.Parameters) (params GetBidReviewsParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "authorUsername",
			In:   "query",
		}
		params.AuthorUsername = packed[key].(Username)
	}
	{
		key := middleware.ParameterKey{
			Name: "requesterUsername",
			In:   "query",
		}
		params.RequesterUsername = packed[key].(Username)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	return params
}

func decodeGetBidReviewsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBidReviewsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: authorUsername.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "authorUsername",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AuthorUsername = Username(paramsDotAuthorUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authorUsername",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: requesterUsername.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "requesterUsername",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRequesterUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRequesterUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RequesterUsername = Username(paramsDotRequesterUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requesterUsername",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int32(5)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           50,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBidStatusParams is parameters of getBidStatus operation.
type GetBidStatusParams struct {
	BidId    BidId
	Username Username
}

func unpackGetBidStatusParams(packed middleware.Parameters) (params GetBidStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeGetBidStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBidStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBidsForTenderParams is parameters of getBidsForTender operation.
type GetBidsForTenderParams struct {
	TenderId TenderId
	Username Username
	// Максимальное число возвращаемых объектов.
	// Используется для запросов с пагинацией.
	// Сервер должен возвращать максимальное допустимое
	// число объектов.
	Limit OptInt32
	// Какое количество объектов должно быть пропущено с
	// начала. Используется для запросов с пагинацией.
	Offset OptInt32
}

func unpackGetBidsForTenderParams(packed middleware.Parameters) (params GetBidsForTenderParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	return params
}

func decodeGetBidsForTenderParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBidsForTenderParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int32(5)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           50,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTenderStatusParams is parameters of getTenderStatus operation.
type GetTenderStatusParams struct {
	TenderId TenderId
	Username OptUsername
}

func unpackGetTenderStatusParams(packed middleware.Parameters) (params GetTenderStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Username = v.(OptUsername)
		}
	}
	return params
}

func decodeGetTenderStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTenderStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal Username
				if err := func() error {
					var paramsDotUsernameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUsernameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUsernameVal = Username(paramsDotUsernameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Username.SetTo(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTendersParams is parameters of getTenders operation.
type GetTendersParams struct {
	// Максимальное число возвращаемых объектов.
	// Используется для запросов с пагинацией.
	// Сервер должен возвращать максимальное допустимое
	// число объектов.
	Limit OptInt32
	// Какое количество объектов должно быть пропущено с
	// начала. Используется для запросов с пагинацией.
	Offset OptInt32
	// Возвращенные тендеры должны соответствовать
	// указанным видам услуг.
	// Если список пустой, фильтры не применяются.
	ServiceType []TenderServiceType
}

func unpackGetTendersParams(packed middleware.Parameters) (params GetTendersParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "service_type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ServiceType = v.([]TenderServiceType)
		}
	}
	return params
}

func decodeGetTendersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTendersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int32(5)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           50,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: service_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "service_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotServiceTypeVal TenderServiceType
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotServiceTypeVal = TenderServiceType(c)
						return nil
					}(); err != nil {
						return err
					}
					params.ServiceType = append(params.ServiceType, paramsDotServiceTypeVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.ServiceType {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service_type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserBidsParams is parameters of getUserBids operation.
type GetUserBidsParams struct {
	// Максимальное число возвращаемых объектов.
	// Используется для запросов с пагинацией.
	// Сервер должен возвращать максимальное допустимое
	// число объектов.
	Limit OptInt32
	// Какое количество объектов должно быть пропущено с
	// начала. Используется для запросов с пагинацией.
	Offset   OptInt32
	Username OptUsername
}

func unpackGetUserBidsParams(packed middleware.Parameters) (params GetUserBidsParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Username = v.(OptUsername)
		}
	}
	return params
}

func decodeGetUserBidsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserBidsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int32(5)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           50,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal Username
				if err := func() error {
					var paramsDotUsernameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUsernameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUsernameVal = Username(paramsDotUsernameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Username.SetTo(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserTendersParams is parameters of getUserTenders operation.
type GetUserTendersParams struct {
	// Максимальное число возвращаемых объектов.
	// Используется для запросов с пагинацией.
	// Сервер должен возвращать максимальное допустимое
	// число объектов.
	Limit OptInt32
	// Какое количество объектов должно быть пропущено с
	// начала. Используется для запросов с пагинацией.
	Offset   OptInt32
	Username OptUsername
}

func unpackGetUserTendersParams(packed middleware.Parameters) (params GetUserTendersParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Username = v.(OptUsername)
		}
	}
	return params
}

func decodeGetUserTendersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserTendersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int32(5)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           50,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal Username
				if err := func() error {
					var paramsDotUsernameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUsernameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUsernameVal = Username(paramsDotUsernameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Username.SetTo(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RollbackBidParams is parameters of rollbackBid operation.
type RollbackBidParams struct {
	BidId BidId
	// Номер версии, к которой нужно откатить предложение.
	Version  int32
	Username Username
}

func unpackRollbackBidParams(packed middleware.Parameters) (params RollbackBidParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "path",
		}
		params.Version = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeRollbackBidParams(args [2]string, argsEscaped bool, r *http.Request) (params RollbackBidParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: version.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "version",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Version)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RollbackTenderParams is parameters of rollbackTender operation.
type RollbackTenderParams struct {
	TenderId TenderId
	// Номер версии, к которой нужно откатить тендер.
	Version  int32
	Username Username
}

func unpackRollbackTenderParams(packed middleware.Parameters) (params RollbackTenderParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "path",
		}
		params.Version = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeRollbackTenderParams(args [2]string, argsEscaped bool, r *http.Request) (params RollbackTenderParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: version.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "version",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Version)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SubmitBidDecisionParams is parameters of submitBidDecision operation.
type SubmitBidDecisionParams struct {
	BidId    BidId
	Decision BidDecision
	Username Username
}

func unpackSubmitBidDecisionParams(packed middleware.Parameters) (params SubmitBidDecisionParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "decision",
			In:   "query",
		}
		params.Decision = packed[key].(BidDecision)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeSubmitBidDecisionParams(args [1]string, argsEscaped bool, r *http.Request) (params SubmitBidDecisionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: decision.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "decision",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Decision = BidDecision(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Decision.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "decision",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SubmitBidFeedbackParams is parameters of submitBidFeedback operation.
type SubmitBidFeedbackParams struct {
	BidId       BidId
	BidFeedback BidFeedback
	Username    Username
}

func unpackSubmitBidFeedbackParams(packed middleware.Parameters) (params SubmitBidFeedbackParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "bidFeedback",
			In:   "query",
		}
		params.BidFeedback = packed[key].(BidFeedback)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeSubmitBidFeedbackParams(args [1]string, argsEscaped bool, r *http.Request) (params SubmitBidFeedbackParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: bidFeedback.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bidFeedback",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBidFeedbackVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidFeedbackVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidFeedback = BidFeedback(paramsDotBidFeedbackVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidFeedback.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidFeedback",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateBidStatusParams is parameters of updateBidStatus operation.
type UpdateBidStatusParams struct {
	BidId    BidId
	Status   BidStatus
	Username Username
}

func unpackUpdateBidStatusParams(packed middleware.Parameters) (params UpdateBidStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "bidId",
			In:   "path",
		}
		params.BidId = packed[key].(BidId)
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		params.Status = packed[key].(BidStatus)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeUpdateBidStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateBidStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bidId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bidId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotBidIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBidIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BidId = BidId(paramsDotBidIdVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.BidId.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bidId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Status = BidStatus(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Status.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTenderStatusParams is parameters of updateTenderStatus operation.
type UpdateTenderStatusParams struct {
	TenderId TenderId
	Status   TenderStatus
	Username Username
}

func unpackUpdateTenderStatusParams(packed middleware.Parameters) (params UpdateTenderStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "tenderId",
			In:   "path",
		}
		params.TenderId = packed[key].(TenderId)
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		params.Status = packed[key].(TenderStatus)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "query",
		}
		params.Username = packed[key].(Username)
	}
	return params
}

func decodeUpdateTenderStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTenderStatusParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tenderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tenderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotTenderIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTenderIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TenderId = TenderId(paramsDotTenderIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tenderId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Status = TenderStatus(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Status.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: username.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "username",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = Username(paramsDotUsernameVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
