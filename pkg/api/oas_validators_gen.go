// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Bid) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.ID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Name.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Description.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "authorType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorId.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "authorId",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Version.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "version",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BidAuthorId) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    100,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidAuthorType) Validate() error {
	switch s {
	case "Organization":
		return nil
	case "User":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BidDecision) Validate() error {
	switch s {
	case "Approved":
		return nil
	case "Rejected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BidDescription) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    500,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidFeedback) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    1000,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidId) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    100,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidName) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    100,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s *BidReview) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.ID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Description.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BidReviewDescription) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    1000,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidReviewId) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    100,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s BidStatus) Validate() error {
	switch s {
	case "Created":
		return nil
	case "Published":
		return nil
	case "Canceled":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BidVersion) Validate() error {
	alias := (int32)(s)
	if err := (validate.Int{
		MinSet:        true,
		Min:           1,
		MaxSet:        false,
		Max:           0,
		MinExclusive:  false,
		MaxExclusive:  false,
		MultipleOfSet: false,
		MultipleOf:    0,
	}).Validate(int64(alias)); err != nil {
		return errors.Wrap(err, "int")
	}
	return nil
}

func (s *CreateBidForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateBidNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateBidReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Name.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Description.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateBidUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateTenderForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateTenderReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Name.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Description.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ServiceType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "serviceType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateTenderUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditBidBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditBidForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditBidNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditBidReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *EditBidUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditTenderBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditTenderForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditTenderNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EditTenderReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "serviceType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *EditTenderUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *ErrorResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    5,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Reason)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetBidReviewsBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidReviewsForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidReviewsNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetBidReviewsOKApplicationJSON) Validate() error {
	alias := ([]BidReview)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetBidReviewsUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidStatusForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidStatusNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidStatusUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidsForTenderBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidsForTenderForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetBidsForTenderNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetBidsForTenderOKApplicationJSON) Validate() error {
	alias := ([]Bid)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetBidsForTenderUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTenderStatusForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTenderStatusNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTenderStatusUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetTendersOKApplicationJSON) Validate() error {
	alias := ([]Tender)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetUserBidsOKApplicationJSON) Validate() error {
	alias := ([]Bid)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetUserTendersOKApplicationJSON) Validate() error {
	alias := ([]Tender)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RollbackBidBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackBidForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackBidNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackBidUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackTenderBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackTenderForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackTenderNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RollbackTenderUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidDecisionBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidDecisionForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidDecisionNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidDecisionUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidFeedbackBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidFeedbackForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidFeedbackNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *SubmitBidFeedbackUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Tender) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Name.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Description.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ServiceType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "serviceType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Version.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "version",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TenderDescription) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    500,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s TenderName) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    100,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s TenderServiceType) Validate() error {
	switch s {
	case "Construction":
		return nil
	case "Delivery":
		return nil
	case "Manufacture":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenderStatus) Validate() error {
	switch s {
	case "Created":
		return nil
	case "Published":
		return nil
	case "Closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenderVersion) Validate() error {
	alias := (int32)(s)
	if err := (validate.Int{
		MinSet:        true,
		Min:           1,
		MaxSet:        false,
		Max:           0,
		MinExclusive:  false,
		MaxExclusive:  false,
		MultipleOfSet: false,
		MultipleOf:    0,
	}).Validate(int64(alias)); err != nil {
		return errors.Wrap(err, "int")
	}
	return nil
}

func (s *UpdateBidStatusBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateBidStatusForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateBidStatusNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateBidStatusUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTenderStatusBadRequest) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTenderStatusForbidden) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTenderStatusNotFound) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateTenderStatusUnauthorized) Validate() error {
	alias := (*ErrorResponse)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}
